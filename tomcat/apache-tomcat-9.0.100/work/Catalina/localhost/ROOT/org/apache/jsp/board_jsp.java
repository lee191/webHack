/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-07 08:57:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import io.jsonwebtoken.*;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.security.Key;

public final class board_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("io.jsonwebtoken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("java.util.Base64");
    _jspx_imports_classes.add("javax.crypto.spec.SecretKeySpec");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String token = null;
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if ("authToken".equals(cookie.getName())) {
                token = cookie.getValue();
            }
        }
    }

    if (token != null) {
        try {
            String secret = "yourSecretKey"; // 최소 256bit 이상 권장
            byte[] keyBytes = secret.getBytes("UTF-8");
            Key signingKey = new SecretKeySpec(keyBytes, SignatureAlgorithm.HS256.getJcaName());

            Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();

            out.println("로그인 사용자: " + claims.getSubject());

        } catch (Exception e) {
            out.println("JWT 오류: " + e.getMessage());
        }
    } else {
        // JWT가 없으면 메세지 출력
        out.println("<script>alert('로그인 후 이용해주세요.');</script>");
        out.println("<script>window.location.href='index.jsp';</script>");
    }

      out.write('\n');
      out.write('\n');

    String action = request.getParameter("action");
    String uploadPath = application.getRealPath("uploads");
    File uploadDir = new File(uploadPath);
    if (!uploadDir.exists()) {
        uploadDir.mkdir();
    }

    if ("upload".equals(action)) {
        Part filePart = request.getPart("file");
        String fileName = filePart.getSubmittedFileName();
        filePart.write(uploadPath + File.separator + fileName);
        out.println("<p>파일 업로드 성공: " + fileName + "</p>");
    } else if ("download".equals(action)) {
        String fileName = request.getParameter("fileName");
        File file = new File(uploadPath + File.separator + fileName);
        if (file.exists()) {
            response.setContentType("application/octet-stream");
            response.setHeader("Content-Disposition", "attachment;filename=\"" + fileName + "\"");
            FileInputStream in = new FileInputStream(file);
            OutputStream outStream = response.getOutputStream();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                outStream.write(buffer, 0, bytesRead);
            }
            in.close();
            outStream.close();
        } else {
            out.println("<p>파일이 존재하지 않습니다.</p>");
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>게시판</title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>게시판 </h1>\n");
      out.write("    <nav>\n");
      out.write("        <ul>\n");
      out.write("            <li><a href=\"index.jsp\">메인 페이지</a></li>\n");
      out.write("            <li><a href=\"board.jsp\">게시판</a></li>\n");
      out.write("            <li><a href=\"logout.jsp\">로그아웃</a></li>\n");
      out.write("        </ul>\n");
      out.write("    </nav>\n");
      out.write("    <p>로그인에 성공하셨습니다. 게시판 내용을 확인하세요.</p>\n");
      out.write("\n");
      out.write("    <h2>파일 업로드</h2>\n");
      out.write("    <form action=\"board.jsp\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"upload\">\n");
      out.write("        <input type=\"file\" name=\"file\">\n");
      out.write("        <button type=\"submit\">업로드</button>\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <h2>파일 다운로드</h2>\n");
      out.write("    <form action=\"board.jsp\" method=\"get\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"download\">\n");
      out.write("        <input type=\"text\" name=\"fileName\" placeholder=\"파일 이름 입력\">\n");
      out.write("        <button type=\"submit\">다운로드</button>\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <h2>글쓰기</h2>\n");
      out.write("    <form action=\"writePost.jsp\" method=\"post\">\n");
      out.write("        <textarea name=\"content\" rows=\"5\" cols=\"50\" placeholder=\"글 내용을 입력하세요\"></textarea><br>\n");
      out.write("        <button type=\"submit\">글쓰기</button>\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <a href=\"index.jsp\">메인 페이지로 돌아가기</a>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
