/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-30 01:26:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.JSONObject;
import java.util.Base64;
import java.util.*;
import java.security.Key;
import javax.crypto.spec.SecretKeySpec;
import io.jsonwebtoken.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("io.jsonwebtoken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("java.util.Base64");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("javax.crypto.spec.SecretKeySpec");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    boolean isLoggedIn = false;
    String username = "";

    Cookie[] cookies = request.getCookies();
    String token = null;

    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if ("authToken".equals(cookie.getName())) {
                token = cookie.getValue();
                break;
            }
        }
    }

    if (token != null) {
        try {
            byte[] keyBytes = "thisIsASecretKeyThatIsAtLeast32Bytes!".getBytes("UTF-8");
            Key signingKey = new SecretKeySpec(keyBytes, SignatureAlgorithm.HS256.getJcaName());

            Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();

            isLoggedIn = true;
            username = claims.getSubject();

        } catch (Exception e) {
            // ======= 서명 없는 JWT 허용 (위험!) =======
            try {
                String[] parts = token.split("\\.");
                if (parts.length >= 2) {
                    String payloadJson = new String(Base64.getUrlDecoder().decode(parts[1]), "UTF-8");
                    JSONObject payload = new JSONObject(payloadJson);
                    username = payload.optString("sub");
                    isLoggedIn = (username != null && !username.isEmpty());
                }
            } catch (Exception e2) {
                username = null;
                isLoggedIn = false;
            }
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>TESTGAMES - 메인 페이지</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("    <!-- 상단 네비게이션 -->\n");
      out.write("    <div class=\"navbar\">\n");
      out.write("        <a href=\"/index.jsp\" class=\"logo\">\n");
      out.write("            TEST<span class=\"white-text\">GAMES</span>\n");
      out.write("        </a>\n");
      out.write("        <div class=\"navbar-right\">\n");
      out.write("            <a href=\"/board/board.jsp\">BLOG</a>\n");
      out.write("            <a href=\"#\">STORE</a>\n");
      out.write("            \n");
      out.write("            ");
 if (isLoggedIn) { 
      out.write("\n");
      out.write("                <a href=\"/login/logout.jsp\">LOGOUT</a>\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                <a href=\"/login/login.jsp\">LOGIN</a>\n");
      out.write("                <a href=\"/signup/signup.jsp\">SIGNUP</a>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            ");
 if ("admin".equals(username)) { 
      out.write("\n");
      out.write("                <a href=\"/admin/index.jsp\">ADMIN</a>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            <a href=\"/mypage/mypage.jsp\">MY PAGE</a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <!-- 히어로 배너 영역 -->\n");
      out.write("    <div class=\"hero\">\n");
      out.write("        <img src=\"/image/hero.jpg\" alt=\"Hero Image\" class=\"hero-img\" />\n");
      out.write("        <div class=\"hero-text\">\n");
      out.write("            <h2>AS WE PASSED, I REMARKED</h2>\n");
      out.write("            <p>As we passed, I remarked a beautiful church-spire...</p>\n");
      out.write("            <button>READ MORE</button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- 사용자 인사말 -->\n");
      out.write("    <section class=\"welcome\">\n");
      out.write("        <h1>환영합니다");
 if (isLoggedIn) { 
      out.write(',');
      out.write(' ');
      out.print( username );
      out.write('님');
      out.write('!');
 } 
      out.write("</h1>\n");
      out.write("    </section>\n");
      out.write("\n");
      out.write("    <!-- 게임 플랫폼 소개 -->\n");
      out.write("    <div class=\"platforms\">\n");
      out.write("        <div class=\"platform\">\n");
      out.write("            ");
      out.write("\n");
      out.write("            <img src=\"/image/pc.png\" alt=\"PC Icon\" />\n");
      out.write("            <div>PC</div>\n");
      out.write("            <a href=\"/board/board.jsp\">VIEW GAMES</a>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"platform\">\n");
      out.write("            ");
      out.write("\n");
      out.write("            <img src=\"/image/ps4.png\" alt=\"PS4 Icon\" />\n");
      out.write("            <div>PS4</div>\n");
      out.write("            <a href=\"/board/board.jsp\">VIEW GAMES</a>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"platform\">\n");
      out.write("            ");
      out.write("\n");
      out.write("            <img src=\"/image/xbox.png\" alt=\"XBOX Icon\" />\n");
      out.write("            <div>XBOX</div>\n");
      out.write("            <a href=\"/board/board.jsp\">VIEW GAMES</a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    \n");
      out.write("    <div class=\"footer\">\n");
      out.write("        <p>&copy; 2025 TESTGAMES.</p>\n");
      out.write("        <p>이 웹사이트는 테스트 용도로 만들어졌습니다.</p>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
