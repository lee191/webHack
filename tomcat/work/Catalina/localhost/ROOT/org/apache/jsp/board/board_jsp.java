/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-25 06:54:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.*;
import io.jsonwebtoken.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import org.apache.commons.text.StringEscapeUtils;

public final class board_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("io.jsonwebtoken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("javax.crypto.spec.SecretKeySpec");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    request.setCharacterEncoding("UTF-8");

    boolean isLoggedIn = false;
    String username = "";
    String token = null;

    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if ("authToken".equals(cookie.getName())) {
                token = cookie.getValue();
                break;
            }
        }
    }

    if (token != null) {
        try {
            String jwtSecret = System.getenv("JWT_SECRET");
            if (jwtSecret != null) {
                byte[] keyBytes = jwtSecret.getBytes("UTF-8");
                Key signingKey = new SecretKeySpec(keyBytes, SignatureAlgorithm.HS256.getJcaName());

                Claims claims = Jwts.parserBuilder()
                    .setSigningKey(signingKey)
                    .build()
                    .parseClaimsJws(token)
                    .getBody();

                isLoggedIn = true;
                username = claims.getSubject();
            } else {
                getServletContext().log("JWT_SECRET not set.");
            }
        } catch (Exception e) {
            getServletContext().log("JWT parse error", e);
        }
    }

    String dbURL = System.getenv("DB_URL");
    String dbUser = System.getenv("DB_USER");
    String dbPassword = System.getenv("DB_PASSWORD");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    String query = request.getParameter("query");
    if (query == null) query = "";
    String trimmedQuery = query.trim();
    boolean isSearch = !trimmedQuery.isEmpty();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>게시판</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"board_styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div class=\"navbar\">\n");
      out.write("    <a href=\"/index.jsp\" class=\"logo\">TEST<span class=\"white-text\">GAMES</span></a>\n");
      out.write("    <div class=\"navbar-right\">\n");
      out.write("        <a href=\"/index.jsp\">MAIN</a>\n");
      out.write("        <a href=\"/login/logout.jsp\">LOGOUT</a>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<h1><a href=\"/board/board.jsp\" class=\"no-link-style\">BLOG</a></h1>\n");
      out.write("\n");
      out.write("<div class=\"welcome-message\">\n");
      out.write("    <p>여기는 TESTGAMES의 블로그입니다.</p>\n");
      out.write("    <p>게임 관련 소식과 업데이트를 확인하세요.</p>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"top-bar\">\n");
      out.write("    <div class=\"search-container\">\n");
      out.write("        <form action=\"board.jsp\" method=\"get\">\n");
      out.write("            <input type=\"text\" name=\"query\" placeholder=\"검색어를 입력하세요\" value=\"");
      out.print( StringEscapeUtils.escapeHtml4(query) );
      out.write("\" required>\n");
      out.write("            <button type=\"submit\">검색</button>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"write-button-container\">\n");
      out.write("        <form action=\"/write/write.jsp\" method=\"get\">\n");
      out.write("            <button type=\"submit\">글쓰기</button>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");
 if (isSearch) { 
      out.write("\n");
      out.write("    <h2>\"");
      out.print( StringEscapeUtils.escapeHtml4(query) );
      out.write("\" 검색 결과</h2>\n");
 } 
      out.write("\n");
      out.write("\n");
      out.write("<table class=\"post-table\">\n");
      out.write("    <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th style=\"width: 10%;\">번호</th>\n");
      out.write("            <th style=\"width: 20%;\">작성자</th>\n");
      out.write("            <th style=\"width: 50%;\">제목</th>\n");
      out.write("            <th style=\"width: 20%;\">작성 시간</th>\n");
      out.write("        </tr>\n");
      out.write("    </thead>\n");
      out.write("    <tbody>\n");

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPassword);

        String sql = isSearch
            ? "SELECT id, username, title, created_at FROM posts WHERE title LIKE ? OR content LIKE ? ORDER BY created_at DESC LIMIT 10"
            : "SELECT id, username, title, created_at FROM posts ORDER BY created_at DESC LIMIT 10";

        pstmt = conn.prepareStatement(sql);

        if (isSearch) {
            String keyword = "%" + trimmedQuery + "%";
            pstmt.setString(1, keyword);
            pstmt.setString(2, keyword);
        }

        rs = pstmt.executeQuery();
        int count = 0;
        while (rs.next()) {
            int postId = rs.getInt("id");
            String writer = StringEscapeUtils.escapeHtml4(rs.getString("username"));
            String title = StringEscapeUtils.escapeHtml4(rs.getString("title"));
            String created = StringEscapeUtils.escapeHtml4(rs.getString("created_at"));

      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( postId );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( writer );
      out.write("</td>\n");
      out.write("            <td><a href=\"/view/view.jsp?id=");
      out.print( postId );
      out.write('"');
      out.write('>');
      out.print( title );
      out.write("</a></td>\n");
      out.write("            <td>");
      out.print( created );
      out.write("</td>\n");
      out.write("        </tr>\n");

            count++;
        }
        if (count == 0) {

      out.write("\n");
      out.write("        <tr><td colspan=\"4\">검색 결과가 없습니다.</td></tr>\n");

        }

    } catch (Exception e) {
        getServletContext().log("게시글 목록 오류", e);
        out.println("<tr><td colspan='4'>데이터를 불러오는 중 오류가 발생했습니다.</td></tr>");
    } finally {
        try { if (rs != null) rs.close(); } catch (Exception e) {}
        try { if (pstmt != null) pstmt.close(); } catch (Exception e) {}
        try { if (conn != null) conn.close(); } catch (Exception e) {}
    }

      out.write("\n");
      out.write("    </tbody>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("<div class=\"footer\">\n");
      out.write("    <p>&copy; 2025 TESTGAMES.</p>\n");
      out.write("    <p>이 웹사이트는 테스트 용도로 만들어졌습니다.</p>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
