/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-23 02:38:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.board_005flist;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.util.*;
import io.jsonwebtoken.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import javax.servlet.http.Part;

public final class add_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
// multipart form 데이터 안전하게 읽는 유틸 함수
String getTextPart(HttpServletRequest request, String name) throws Exception {
    BufferedReader reader = new BufferedReader(
        new InputStreamReader(request.getPart(name).getInputStream(), "UTF-8"));
    StringBuilder sb = new StringBuilder();
    String line;
    while ((line = reader.readLine()) != null) {
        sb.append(line).append("\n");
    }
    return sb.toString().trim();
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("io.jsonwebtoken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("javax.servlet.http.Part");
    _jspx_imports_classes.add("javax.crypto.spec.SecretKeySpec");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

request.setCharacterEncoding("UTF-8");

// 관리자 인증 (JWT)
String username = null;
String token = null;
boolean isAdmin = false;

Cookie[] cookies = request.getCookies();
if (cookies != null) {
    for (Cookie cookie : cookies) {
        if ("authToken".equals(cookie.getName())) {
            token = cookie.getValue();
            break;
        }
    }
}

if (token != null) {
    try {
        byte[] keyBytes = System.getenv("JWT_SECRET").getBytes("UTF-8");
        Key key = new SecretKeySpec(keyBytes, SignatureAlgorithm.HS256.getJcaName());
        Claims claims = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
        username = claims.getSubject();
        isAdmin = "admin".equals(username);
    } catch (Exception e) {
        getServletContext().log("JWT 파싱 실패", e);
    }
}

if (!isAdmin) {

      out.write("\n");
      out.write("<script>alert(\"관리자만 접근 가능한 페이지입니다.\"); location.href = \"/index.jsp\";</script>\n");

    return;
}

// 안전하게 파싱
String title = null;
String content = null;
try {
    title = getTextPart(request, "title");
    content = getTextPart(request, "content");
} catch (Exception e) {
    getServletContext().log("multipart 파싱 실패", e);

      out.write("\n");
      out.write("<script>alert(\"폼 데이터 파싱 실패\"); history.back();</script>\n");

    return;
}

if (title == null || title.isEmpty() || content == null || content.isEmpty()) {

      out.write("\n");
      out.write("<script>alert(\"제목과 내용을 모두 입력하세요.\"); history.back();</script>\n");

    return;
}

// 파일 업로드 처리
String filename = null;
String uploadPath = application.getRealPath("/uploads");
if (uploadPath == null) {

      out.write("\n");
      out.write("<script>alert(\"업로드 경로를 찾을 수 없습니다.\"); history.back();</script>\n");

    return;
}
File uploadDir = new File(uploadPath);
if (!uploadDir.exists()) uploadDir.mkdirs();

Part filePart = request.getPart("file");
if (filePart != null && filePart.getSize() > 0) {
    filename = filePart.getSubmittedFileName();

    // 확장자 제한
    String ext = "";
    int i = filename.lastIndexOf('.');
    if (i > 0) ext = filename.substring(i).toLowerCase();

    List<String> allowedExts = Arrays.asList(".jpg", ".jpeg", ".png", ".pdf", ".txt", ".zip");
    if (!allowedExts.contains(ext)) {

      out.write("\n");
      out.write("<script>alert(\"허용되지 않은 파일 형식입니다.\"); history.back();</script>\n");

        return;
    }

    filePart.write(uploadPath + File.separator + filename);
}

// DB 저장
Connection conn = null;
PreparedStatement pstmt = null;

String dbURL = System.getenv("DB_URL");
String dbUser = System.getenv("DB_USER");
String dbPassword = System.getenv("DB_PASSWORD");

try {
    Class.forName("com.mysql.cj.jdbc.Driver");
    conn = DriverManager.getConnection(dbURL, dbUser, dbPassword);

    String sql = "INSERT INTO posts (username, title, content, filename) VALUES (?, ?, ?, ?)";
    pstmt = conn.prepareStatement(sql);
    pstmt.setString(1, username);
    pstmt.setString(2, title);
    pstmt.setString(3, content);
    pstmt.setString(4, filename);

    pstmt.executeUpdate();

      out.write("\n");
      out.write("<script>alert(\"게시글이 등록되었습니다.\"); location.href=\"/admin/board_list/board_list.jsp\";</script>\n");

} catch (Exception e) {
    getServletContext().log("DB 오류", e);

      out.write("\n");
      out.write("<script>alert(\"DB 오류 발생. 관리자에게 문의하세요.\"); history.back();</script>\n");

} finally {
    try { if (pstmt != null) pstmt.close(); } catch (Exception ignore) {}
    try { if (conn != null) conn.close(); } catch (Exception ignore) {}
}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
