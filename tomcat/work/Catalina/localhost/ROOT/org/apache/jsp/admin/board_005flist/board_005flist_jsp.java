/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-23 02:41:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.board_005flist;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.security.Key;
import javax.crypto.spec.SecretKeySpec;
import io.jsonwebtoken.*;
import org.apache.commons.text.StringEscapeUtils;

public final class board_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("io.jsonwebtoken");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.security.Key");
    _jspx_imports_classes.add("javax.crypto.spec.SecretKeySpec");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

String token = null;
String username = null;
boolean isAdmin = false;

Cookie[] cookies = request.getCookies();
if (cookies != null) {
    for (Cookie cookie : cookies) {
        if ("authToken".equals(cookie.getName())) {
            token = cookie.getValue();
            break;
        }
    }
}

if (token != null) {
    try {
        byte[] keyBytes = System.getenv("JWT_SECRET").getBytes("UTF-8");
        Key signingKey = new SecretKeySpec(keyBytes, SignatureAlgorithm.HS256.getJcaName());
        Claims claims = Jwts.parserBuilder()
            .setSigningKey(signingKey)
            .build()
            .parseClaimsJws(token)
            .getBody();

        username = claims.getSubject();
        isAdmin = "admin".equals(username);
    } catch (Exception e) {
        getServletContext().log("JWT 인증 실패", e);
    }
}

if (!isAdmin) {

      out.write("\n");
      out.write("<script>\n");
      out.write("    alert(\"관리자만 접근 가능합니다.\");\n");
      out.write("    location.href = \"/index.jsp\";\n");
      out.write("</script>\n");

    return;
}

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>게시판 관리</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"board_list_styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>게시판 관리</h1>\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <tr>\n");
      out.write("            <th>ID</th>\n");
      out.write("            <th>작성자</th>\n");
      out.write("            <th>제목</th>\n");
      out.write("            <th>내용</th>\n");
      out.write("            <th>파일명</th>\n");
      out.write("            <th>작성일</th>\n");
      out.write("        </tr>\n");

    String dbURL = System.getenv("DB_URL");
    String dbUser = System.getenv("DB_USER");
    String dbPassword = System.getenv("DB_PASSWORD");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPassword);
        pstmt = conn.prepareStatement("SELECT * FROM posts ORDER BY created_at DESC");
        rs = pstmt.executeQuery();

        while (rs.next()) {
            int id = rs.getInt("id");
            String name = StringEscapeUtils.escapeHtml4(rs.getString("username"));
            String title = StringEscapeUtils.escapeHtml4(rs.getString("title"));
            String content = StringEscapeUtils.escapeHtml4(rs.getString("content"));
            String filename = StringEscapeUtils.escapeHtml4(rs.getString("filename"));
            String date = StringEscapeUtils.escapeHtml4(rs.getString("created_at"));

            String trimmedContent = content != null && content.length() > 30 ? content.substring(0, 30) + "..." : content;
            String trimmedTitle = title != null && title.length() > 10 ? title.substring(0, 10) + "..." : title;
            String trimmedFilename = filename != null && filename.length() > 10 ? filename.substring(0, 10) + "..." : filename;

      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( id );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( name );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( trimmedTitle );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( trimmedContent );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( trimmedFilename );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( date );
      out.write("</td>\n");
      out.write("        </tr>\n");

        }
    } catch (Exception e) {
        getServletContext().log("게시판 목록 로딩 오류", e);

      out.write("\n");
      out.write("<script>alert(\"게시글 조회 중 오류가 발생했습니다.\"); location.href='/admin/index.jsp';</script>\n");

    } finally {
        try { if (rs != null) rs.close(); } catch (SQLException ignore) {}
        try { if (pstmt != null) pstmt.close(); } catch (SQLException ignore) {}
        try { if (conn != null) conn.close(); } catch (SQLException ignore) {}
    }

      out.write("\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("    <!-- 버튼 영역 -->\n");
      out.write("    <form action=\"/admin/index.jsp\" method=\"post\" style=\"display:inline;\">\n");
      out.write("        <button type=\"submit\">관리자 페이지</button>\n");
      out.write("    </form>\n");
      out.write("    <form action=\"/admin/board_list/delete.jsp\" method=\"post\" style=\"display:inline;\">\n");
      out.write("        <button type=\"submit\">게시물 삭제</button>\n");
      out.write("    </form>\n");
      out.write("    <form action=\"/admin/board_list/delete_all.jsp\" method=\"post\" style=\"display:inline;\">\n");
      out.write("        <button type=\"submit\">전체 삭제</button>\n");
      out.write("    </form>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
